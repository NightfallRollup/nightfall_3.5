/* eslint-disable no-template-curly-in-string */
/* eslint-disable no-multi-str */
import fs from 'fs';
import { copyDir } from './workers-code/utils.mjs';

const transpileTransactionSubmitted = (_pathToSrc, _pathToInject) => {
  let srcFile = fs.readFileSync(_pathToSrc, 'utf-8');
  srcFile = `/* THIS FILE CONTAINS CODE THAT HAS BEEN AUTOGENERATED DO NOT MODIFY MANUALLY */\n${srcFile}`;

  const srcImportPreamble = /(\n|.)*(?=} from '..\/services\/database.mjs';)/g;
  const srcImportPostamble = /import { checkTransaction }(\n|.)*/g;

  // Inject Debug Info
  const injectDebugInfo = fs.readFileSync(_pathToInject, 'utf-8');

  let [srcPre] = srcFile.match(srcImportPreamble);
  let [srcPost] = srcFile.match(srcImportPostamble);
  srcFile = `${srcPre}saveBufferedTransaction,\n} from '../services/database.mjs';\n\n\n${injectDebugInfo}\n${srcPost}`;

  const srcFunctionPreamble = /(\n|.)*(?=export async function submitTransaction\(eventParams\))/g;
  const srcFunctionPostamble = /const { offchain = false, ...data } = eventParams(\n|.)*/g;
  const newSrcFunction =
    'export async function submitTransaction(eventParams, txEnable) {\n \
  // Test mode. If txEnable is true, we process transactions as fast as we can (as usual). If false, then we\n \
  // store these transactions in a buffer with the idea of processing them back later at once.\n \
  if (!txEnable) {\n \
    saveBufferedTransaction({ ...eventParams });\n \
    return;\n \
  }\n';

  [srcPre] = srcFile.match(srcFunctionPreamble);
  [srcPost] = srcFile.match(srcFunctionPostamble);
  srcFile = `${srcPre}${newSrcFunction}\n${srcPost}`;

  const srcFunction2Preamble = /(\n|.)*(?=export async function transactionSubmittedEventHandler)/g;
  const newSrcFunction2 =
    'export async function transactionSubmittedEventHandler(eventParams) {\n \
    // If TX WORKERS enabled or not responsive, route transaction requests to main thread\n \
    if (_workerEnable) {\n \
      axios\n \
        .post(`${txWorkerUrl}/workers/transaction-submitted`, {\n \
          eventParams,\n \
          enable: _submitTransactionEnable === true,\n \
        })\n \
        .catch(function (error) {\n \
          logger.error(`Error submit tx worker ${error}, ${txWorkerUrl}`);\n \
          submitTransaction(eventParams, _submitTransactionEnable);\n \
        });\n \
    } else {\n \
      // Main thread (no workers)\n \
      await submitTransaction(eventParams, _submitTransactionEnable);\n \
    }\n \
  }\n';
  [srcPre] = srcFile.match(srcFunction2Preamble);
  srcFile = `${srcPre}${newSrcFunction2}`;

  fs.writeFileSync(_pathToSrc, srcFile);
};

const transpileTransactionSubmittedApp = _pathToSrc => {
  let srcFile = fs.readFileSync(_pathToSrc, 'utf-8');
  srcFile = `/* THIS FILE CONTAINS CODE THAT HAS BEEN AUTOGENERATED DO NOT MODIFY MANUALLY */\n${srcFile}`;

  const srcFunctionPreamble = /(\n|.)*(?=app.post\('\/workers\/transaction-submitted')/g;
  const srcFunctionPostamble = /app.post\('\/workers\/check-transaction'(\n|.)*/g;
  const newSrcFunction =
    "app.post('/workers/transaction-submitted', async (req, res) => {\n \
    const { eventParams, enable } = req.body;\n \
    try {\n \
      const response = submitTransaction(eventParams, enable);\n \
      res.json(response);\n \
    } catch (err) {\n \
      res.sendStatus(500);\n \
    }\n \
  });\n";

  const [srcPre] = srcFile.match(srcFunctionPreamble);
  const [srcPost] = srcFile.match(srcFunctionPostamble);
  srcFile = `${srcPre}${newSrcFunction}\n${srcPost}`;

  fs.writeFileSync(_pathToSrc, srcFile);
};

// Transpile Temp Buffer to database
const transpileDatabaseTempBuffer = (_pathToSrc, _pathToInject) => {
  let srcFile = fs.readFileSync(_pathToSrc, 'utf-8');
  srcFile = `/* THIS FILE CONTAINS CODE THAT HAS BEEN AUTOGENERATED DO NOT MODIFY MANUALLY */\n${srcFile}`;

  const srcImportPreamble = /(\n|.)*(?=} = config;)/g;
  const srcImportPostamble = /export async function saveCommit(\n|.)*/g;
  const [srcPre] = srcFile.match(srcImportPreamble);
  const [srcPost] = srcFile.match(srcImportPostamble);
  srcFile = `${srcPre}BUFFERED_TRANSACTIONS_COLLECTION,\n} = config;\n\n\n${srcPost}`;
  // Inject tmp buffering to database
  const injectTempBuffer = fs.readFileSync(_pathToInject, 'utf-8');

  srcFile = `${srcFile}\n${injectTempBuffer}`;

  fs.writeFileSync(_pathToSrc, srcFile);
};

const transpileDebugRoute = (_pathToSrc, _pathToInject) => {
  let srcFile = fs.readFileSync(_pathToSrc, 'utf-8');
  srcFile = `/* THIS FILE CONTAINS CODE THAT HAS BEEN AUTOGENERATED DO NOT MODIFY MANUALLY */\n${srcFile}`;

  const injectRoute = fs.readFileSync(_pathToInject, 'utf-8');

  srcFile = `${srcFile}\n${injectRoute}`;

  fs.writeFileSync(_pathToSrc, srcFile);
};

copyDir('./nightfall-optimist/', './test/workers/optimist-tx-workers/').then(() => {
  console.log('done with optimist copy');

  transpileDatabaseTempBuffer(
    './test/workers/optimist-tx-workers/src/services/database.mjs',
    './test/workers/workers-code/buffered-transactions-collection.mjs',
  );

  transpileTransactionSubmitted(
    './test/workers/optimist-tx-workers/src/event-handlers/transaction-submitted.mjs',
    './test/workers/workers-code/transaction-submitted.mjs',
  );

  transpileTransactionSubmittedApp(
    './test/workers/optimist-tx-workers/src/workers/transaction-submitted-app.mjs',
  );

  transpileDebugRoute(
    './test/workers/optimist-tx-workers/src/routes/debug.mjs',
    './test/workers/workers-code/debug-route.mjs',
  );
  console.log(`transpile optimist tx workers done`);
});
